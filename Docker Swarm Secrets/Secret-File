#Create a file name as credetials and paste the following with working keys
# [default]
# aws_access_key_id=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
# aws_secret_access_key=ASASASASASASASASASASASASAS
# docker secret create aws_creds credentials
# Use the above created secret mounted to /root/.aws/credentials as shown below.
#docker stack deploy -c aws_cli.yml AWS
#--------------------------------------------------------------------------------------

version: '3.3'
services:
  cli:
    image: sadanandak/rollingupdate:v10
    secrets:
      - source: aws_creds
        target: /root/.aws/credentials
        uid: '1000'
        gid: '1000'
        mode: 0700
    deploy:
      replicas: 1
      placement:
        constraints: [node.role != manager]
      resources:
        reservations:
          memory: 128M
        limits:
         memory: 512M
    environment:
      AWS_DEFAULT_REGION: us-east-1
    networks:
      - appnet
secrets:
  aws_creds:
    external: true
networks:
  appnet:

#####################################################################################################

#Its not possible to mount docker secrets directly as ENV variables similar to k8s.
# docker network create â€“driver overlay appnet
#openssl rand -base64 12 | docker secret create db_root_password -
#openssl rand -base64 12 | docker secret create db_dba_password -
# docker stack deploy  -c <filename with below code> <stack_name>
#apt-get install mysql-server for mysql client
#mysql -h MYSQL_db -u root -p
#docker stack deploy  -c <filename with below code> <stack_name>
###################################################################
version: '3.3'

services:
  db:
    image: mysql:8.0
    secrets:
      - db_root_password
      - db_dba_password
      - source: db_root_password
        target: ROOT_PASSWORD
      - source: db_dba_password
        target: DB_PASSWORD
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      resources:
        reservations:
          memory: 128M
          cpus: '0.25'
        limits:
         memory: 512M
         cpus: '1'
    ports:
      - 3306:3306
    environment:
      MYSQL_USER: dba
      MYSQL_DATABASE: mydb
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_PASSWORD_FILE: /run/secrets/db_dba_password
    networks:
      - appnet
    volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
        - "datavol:/var/lib/mysql"

  adminer:
    image: adminer
    ports:
      - 8888:8080
    networks:
      - appnet

  utils:
    image: sadanandak/troubleshootingtools:v1
    deploy:
      replicas: 1
      placement:
        constraints: [node.role != manager]
    networks:
      - appnet

secrets:
  db_root_password:
    external: true
  db_dba_password:
    external: true

networks:
  appnet:
    external: true
  saikiran:
  sai:

volumes:
  datavol:
